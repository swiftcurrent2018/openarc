#####################################################################
# Sample OpenARC configuration file                                 #
#     - Any OpenARC configuration parameters can be put here.       #
#     - Lines starting with '#' will be ignored.                    #
#     - Add  "-gpuConfFile=thisfilename" to the commandline input.  #
############################################################################
# Avaliable OpenARC configuration parameters                               #
# (Use the list at the end to selectively apply configuration parameters)  # 
############################################################################
########################################
#Option: ASPENModelGen
########################################
#ASPENModelGen=modelname=name:mode=number:entryfunction=entryfunc:complement=0|1:functions=foo,bar:postprocessing=number
#Generate ASPEN model for the input program; 
#modelname = [name of generated Aspen model]
#mode = 0 (skip the whole Aspen model gereation passes)
#       1 (analyze an input program and generated output C program annotated with Aspen directives)
#       2 (skip analysis pass and generate output Aspen model only with Aspen directives annotated in the input program)
#       3 (mode 1 + 2; analyze an input program, annotate it with Aspen directives, and generate output Aspen model (default))
#       4 (mode 3 + modify the input OpenACC program such that each compute region is selectively offloaded using HI_aspenpredic() function)
#entryfunction = [entry function to generate Aspen model]
#functions = [comma-separated list of functions]
#complement = 0 (ignore functions if specified in functions sub-option (default))
#             1 (ignore functions if not specified in functions sub-option)
#postprocessing = 0 (does not perform any Aspen IR flattening transformation)
#                 1 (inline Aspen kernels called within Aspen maps)
#                 2 (inline Aspen kernels + merge Aspen maps if directly nested (default))
#
########################################
#Option: AccAnalysisOnly
########################################
#AccAnalysisOnly=N
#Conduct OpenACC analysis only and exit if option value > 0
#        =0 disable this option (default)
#        =1 OpenACC Annotation parsing
#        =2 OpenACC Annotation parsing + initial code restructuring
#        =3 OpenACC parsing + code restructuring + OpenACC loop directive preprocessing
#        =4 option3 + OpenACC annotation analysis
#        =5 option4 + privatization/reduction analyses
#
########################################
#Option: AccParallelization
########################################
#AccParallelization=N
#Find parallelizable loops
#      =0 disable automatic parallelization analysis (default) 
#      =1 add independent clauses to OpenACC loops if they are parallelizable but don't have any work-sharing clauses
#
########################################
#Option: AccPrivatization
########################################
#AccPrivatization=N
#Privatize scalar/array variables accessed in compute regions (parallel loops and kernels loops)
#      =0 disable automatic privatization
#      =1 enable only scalar privatization (default)
#      =2 enable both scalar and array variable privatization
#(this option is always applied unless explicitly disabled by setting the value to 0)
#
########################################
#Option: AccReduction
########################################
#AccReduction=N
#Perform reduction variable analysis
#      =0 disable reduction analysis 
#      =1 enable only scalar reduction analysis (default)
#      =2 enable array reduction analysis and transformation
#(this option is always applied unless explicitly disabled by setting the value to 0)
#
########################################
#Option: CUDACompCapability
########################################
#CUDACompCapability=1.1
#CUDA compute capability of a target GPU
#
########################################
#Option: CloneKernelCallingProcedures
########################################
#CloneKernelCallingProcedures=N
#Clone procedures calling compute regions; 
#N = 1 (Enable this kernel-calling-procedure cloning) (default) 
#N = 0 (Disable this kernel-calling-procedure cloning)
#
########################################
#Option: SetAccEntryFunction
########################################
#SetAccEntryFunction=filename
#Name of the entry function, from which all device-related codes will be executed. (Default is main.)
#
########################################
#Option: SkipGPUTranslation
########################################
#SkipGPUTranslation=N
#Skip the final GPU translation
#        =1 exit after all analyses are done (default)
#        =2 exit before the final GPU translation
#        =3 exit after private variable transformaion
#        =4 exit after reduction variable transformation
#
########################################
#Option: UEPRemovalOptLevel
########################################
#UEPRemovalOptLevel=N
#Optimization level (0-2) to remove upwardly exposed private (UEP) variables (default is 0). This optimization may be unsafe; this should be enabled only if UEP problems occur, andprogrammer should verify the correctness manually.
#
########################################
#Option: UserDirectiveFile
########################################
#UserDirectiveFile=filename
#Name of the file that contains user directives. The file should exist in the current directory.
#
########################################
#Option: WerrorLLVM
########################################
#WerrorLLVM
#Report all BuildLLVM warnings as errors. Has no effect if BuildLLVM pass is not enabled (see -emitLLVM)
#
########################################
#Option: acc2gpu
########################################
#acc2gpu=N
#Generate a Host+Accelerator program from OpenACC program: 
#        =0 disable this option
#        =1 enable this option (default)
#        =2 enable this option for distribued OpenACC program
#
########################################
#Option: addErrorCheckingCode
########################################
#addErrorCheckingCode
#Add CUDA-error-checking code right after each kernel call (If this option is on, forceSyncKernelCalloption is suppressed, since the error-checking code contains a built-in synchronization call.); used for debugging.
#
########################################
#Option: addIncludePath
########################################
#addIncludePath=DIR
#Add the directory DIR to the list of directories to be searched for header files; to add multiple directories, use this option multiple times. (Current directory is included by default.)
#
########################################
#Option: addSafetyCheckingCode
########################################
#addSafetyCheckingCode
#Add GPU-memory-usage-checking code just before each kernel call; used for debugging.
#
########################################
#Option: alias
########################################
#alias=N
#Specify level of alias analysis
#      =0 disable alias analysis (assume no alias)
#      =1 advanced interprocedural analysis (default)
#         Uses interprocedural points-to analysis
#      =2 assume no alias when points-to analysis is too conservative
#      =3 assume all locations are aliased
#
########################################
#Option: assumeNoAliasingAmongKernelArgs
########################################
#assumeNoAliasingAmongKernelArgs
#Assume that there is no aliasing among kernel arguments
#
########################################
#Option: assumeNonZeroTripLoops
########################################
#assumeNonZeroTripLoops
#Assume that all loops have non-zero iterations
#
########################################
#Option: callgraph
########################################
#callgraph
#Print the static call graph to stdout
#
########################################
#Option: cudaGlobalMemSize
########################################
#cudaGlobalMemSize=size in bytes
#Size of CUDA global memory in bytes (default value = 1600000000); used for debugging
#
########################################
#Option: cudaMaxGridDimSize
########################################
#cudaMaxGridDimSize=number
#Maximum size of each dimension of a grid of thread blocks ( System max = 65535)
#
########################################
#Option: cudaSharedMemSize
########################################
#cudaSharedMemSize=size in bytes
#Size of CUDA shared memory in bytes (default value = 16384); used for debugging
#
########################################
#Option: ddt
########################################
#ddt=N
#Perform Data Dependence Testing
#      =1 banerjee-wolfe test (default)
#      =2 range test
#
########################################
#Option: debugLLVM
########################################
#debugLLVM
#Generate debug output for BuildLLVM pass. Has no effect if BuildLLVM pass is not enabled (see -emitLLVM)
#
########################################
#Option: debug_parser_input
########################################
#debug_parser_input
#Print a single preprocessed input file before sending to parser and exit
#
########################################
#Option: debug_parser_output
########################################
#debug_parser_output
#Print a parser output file before running any analysis/transformation passes and exit
#
########################################
#Option: debug_preprocessor_command
########################################
#debug_preprocessor_command
#Print the command and options to be used for preprocessing and exit
#
########################################
#Option: debug_preprocessor_input
########################################
#debug_preprocessor_input
#Print a single pre-annotated input file before sending to preprocessor and exit
#
########################################
#Option: defaultMarginOfError
########################################
#defaultMarginOfError=E
#Set the default value of the allowable margin of error for program verification (default E = 1.0e-6)
#
########################################
#Option: defaultNumComputeUnits
########################################
#defaultNumComputeUnits=N
#Default number of physical compute units (default value = 1); applicable only to Altera-OpenCL devices
#
########################################
#Option: defaultNumSIMDWorkItems
########################################
#defaultNumSIMDWorkItems=N
#Default number of work-items within a work-group executing in an SIMD manner (default value = 1); applicable only to Altera-OpenCL devices
#
########################################
#Option: defaultNumWorkers
########################################
#defaultNumWorkers=N
#Default number of workers per gang for compute regions (default value = 64)
#
########################################
#Option: defaultTuningConfFile
########################################
#defaultTuningConfFile=filename
#Name of the file that contains default GPU tuning configurations. (Default is gpuTuning.config) If the file does not exist, system-default setting will be used. 
#
########################################
#Option: disableDefaultCachingOpts
########################################
#disableDefaultCachingOpts
#Disable default caching optimizations so that they are applied only if explicitly requested
#
########################################
#Option: disableStatic2GlobalConversion
########################################
#disableStatic2GlobalConversion
#disable automatic converstion of static variables in procedures except for main into global variables.
#
########################################
#Option: disableWorkShareLoopCollapsing
########################################
#disableWorkShareLoopCollapsing
#disable automatic collapsing of work-share loops in compute regions.
#
########################################
#Option: doNotRemoveUnusedSymbols
########################################
#doNotRemoveUnusedSymbols=N
#Do not remove unused local symbols in procedures.
#N = 0 (ignore this option; remove both unused symbols and procedures)
#  = 1 (do not remove unused symbols or procedures; default)
#  = 2 (do not remove unused procedures)
#  = 3 (do not remove unused symbols)
#
########################################
#Option: dump-options
########################################
#dump-options
#Create file options.cetus with default options
#
########################################
#Option: dump-system-options
########################################
#dump-system-options
#Create system wide file options.cetus with default options
#
########################################
#Option: emitLLVM
########################################
#emitLLVM
#Emit LLVM IR instead of source code. Optionally, target strings for LLVM can be specified as an argument in the form:
#
#  [target-triple][;target-data-layout]
#
#For example:
#
#  -emitLLVM='x86_64-apple-macosx10.9.0;e-m:o-i64:64-f80:128-n8:16:32:64-S128'
#
#For details see:
#
#  http://llvm.org/docs/LangRef.html#target-triple
#  http://llvm.org/docs/LangRef.html#data-layout
#
#To select the target strings configured when OpenARC was built, specify either of the following:
#
#  -emitLLVM
#  -emitLLVM=
#
########################################
#Option: enableCustomProfiling
########################################
#enableCustomProfiling
#Enable directive-based custom profiling; otherwise, profile-related directives are ignored.
#
########################################
#Option: enableFaultInjection
########################################
#enableFaultInjection
#Enable directive-based fault injection; otherwise, fault-injection-related direcitves are ignored.
#(If this option is set to 0 (enableFaultInjection=0), faults will be injected to each GPU thread; otherwise, faults will be injected to only one GPU thread in each kernel. If -emitLLVM is also specified, fault injection is enabled, but the -enableFaultInjection argument is ignored.)
#
########################################
#Option: expand-all-header
########################################
#expand-all-header
#Expand all header file #includes into code
#
########################################
#Option: expand-user-header
########################################
#expand-user-header
#Expand user (non-standard) header file #includes into code
#
########################################
#Option: extractTuningParameters
########################################
#extractTuningParameters=filename
#Extract tuning parameters; output will be stored in the specified file. (Default is TuningOptions.txt)The generated file contains information on tuning parameters applicable to current input program.
#
########################################
#Option: forceSyncKernelCall
########################################
#forceSyncKernelCall
#If enabled, HI_synchronize(1) call is inserted right after each kernel call in the default queue to force explicit synchronization; useful for debugging or timing the kernel execution.
#
########################################
#Option: genTuningConfFiles
########################################
#genTuningConfFiles=tuningdir
#Generate tuning configuration files and/or userdirective files; output will be stored in the specified directory. (Default is tuning_conf)
#
########################################
#Option: gpuConfFile
########################################
#gpuConfFile=filename
#Name of the file that contains OpenACC configuration parameters. (Any valid OpenACC-to-GPU compiler flags can be put in the file.) The file should exist in the current directory.
#
########################################
#Option: gpuMallocOptLevel
########################################
#gpuMallocOptLevel=N
#GPU Malloc optimization level (0-1) (default is 0)
#
########################################
#Option: gpuMemTrOptLevel
########################################
#gpuMemTrOptLevel=N
#CPU-GPU memory transfer optimization level (0-4) (default is 3);if N > 3, aggressive optimizations such as array-name-only analysis will be applied.
#
########################################
#Option: help
########################################
#help
#Print this message
#
########################################
#Option: induction
########################################
#induction=N
#Perform induction variable substitution
#      =1 enable substitution of linear induction variables
#      =2 enable substitution of generalized induction variables
#      =3 enable insertion of runtime test for zero-trip loops (default)
#
########################################
#Option: load-options
########################################
#load-options
#Load options from file options.cetus
#
########################################
#Option: localRedVarConf
########################################
#localRedVarConf=N
#Configure how local reduction variables are generated; 
#N = 2 (local scalar reduction variables are allocated in the GPU shared memory and local array reduction variables are cached on the shared memory) 
#N = 1 (local scalar reduction variables are allocated in the GPU shared memory and local array reduction variables are cached on the shared memory if included in CUDA sharedRO/sharedRW clause) (default) 
#N = 0 (All local reduction variables are allocated in the GPU global memory and not cached in the GPU shared memory.)
#
########################################
#Option: loopUnrollFactor
########################################
#loopUnrollFactor=N
#Unroll loops inside OpenACC compute regions
#        N Specifies the unroll factor
#
########################################
#Option: macro
########################################
#macro
#Sets macros for the specified names with comma-separated list (no space is allowed)
#e.g., -macro=ARCH=i686,OS=linux
#
########################################
#Option: maxNumGangs
########################################
#maxNumGangs=N
#Maximum number of gangs per a compute region; this option will be applied to all gang loops in the program.
#
########################################
#Option: maxNumWorkers
########################################
#maxNumWorkers=N
#Maximum number of workers per a compute region; this option will be applied to all gang loops in the program.
#
########################################
#Option: minValueToCheck
########################################
#minValueToCheck=M
#Set the minimum value for error-checking; data with values lower than this will not be checked.
#If this option is not provided, all GPU-written data will be checked for kernel verification.
#
########################################
#Option: noPrintCode
########################################
#noPrintCode
#do not print final code, whether C or LLVM IR
#
########################################
#Option: normalize-loops
########################################
#normalize-loops
#Normalize for loops so they begin at 0 and have a step of 1
#
########################################
#Option: normalize-return-stmt
########################################
#normalize-return-stmt
#Normalize return statements for all procedures
#
########################################
#Option: omp2acc
########################################
#omp2acc=N
#Generate OpenACC program from OpenMP 4.0 program: 
#        =0 disable this option (default)
#        =1 enable this option
#
########################################
#Option: ompGen
########################################
#ompGen=N
#Generate OpenMP pragma
#      =1 comment out existing OpenMP pragmas (default)
#      =2 remove existing OpenMP pragmas
#      =3 remove existing OpenMP and Cetus pragmas
#      =4 keep all pragmas
#
########################################
#Option: outdir
########################################
#outdir=dirname
#Set the output directory name (default is cetus_output)
#
########################################
#Option: parallelize-loops
########################################
#parallelize-loops
#Annotate loops with Parallelization decisions
#      =1 parallelizes outermost loops (default)
#      =2 parallelizes every loop
#      =3 parallelizes outermost loops with report
#      =4 parallelizes every loop with report
#
########################################
#Option: parser
########################################
#parser=parsername
#Name of parser to be used for parsing source file
#
########################################
#Option: pipelineTransformation
########################################
#pipelineTransformation=N
#Control the pipelining transformation, which exploits Altera-specific channel mechanism; 
#N = 0 (Disable this pipelining transformation)
#N = 1 (Enable this pipelining transformation when targeting Altera FPGAs) (default)
#
########################################
#Option: preprocessor
########################################
#preprocessor=command
#Set the preprocessor command to use
#
########################################
#Option: preserve-KR-function
########################################
#preserve-KR-function
#Preserves K&R-style function declaration
#
########################################
#Option: printConfigurations
########################################
#printConfigurations
#Generate output codes to print applied configurations/optimizations at the program exit
#
########################################
#Option: privatize
########################################
#privatize=N
#Perform scalar/array privatization analysis
#      =1 enable only scalar privatization
#      =2 enable scalar and array privatization (default)
#
########################################
#Option: profile-loops
########################################
#profile-loops=N
#Inserts loop-profiling calls
#      =1 every loop          =2 outermost loop
#      =3 every omp parallel  =4 outermost omp parallel
#      =5 every omp for       =6 outermost omp for
#
########################################
#Option: profitable-omp
########################################
#profitable-omp=N
#Inserts runtime for selecting profitable omp parallel region (See the API documentation for more details)
#      =0 disable
#      =1 Model-based loop selection (default)
#      =2 Profile-based loop selection
#
########################################
#Option: programVerification
########################################
#programVerification=N
#Perform program verfication for debugging; 
#N = 1 (verify the correctness of CPU-GPU memory transfers) (default)
#N = 2 (verify the correctness of GPU kernel translation)
#
########################################
#Option: prvtArryCachingOnSM
########################################
#prvtArryCachingOnSM
#Cache private array variables onto GPU shared memory
#
########################################
#Option: range
########################################
#range=N
#Specifies the accuracy of symbolic analysis with value ranges
#      =0 disable range computation (minimal symbolic analysis)
#      =1 enable local range computation (default)
#      =2 enable inter-procedural computation (experimental)
#
########################################
#Option: reduction
########################################
#reduction=N
#Perform reduction variable analysis
#      =1 enable only scalar reduction analysis (default)
#      =2 enable array reduction analysis and transformation
#
########################################
#Option: showInternalAnnotations
########################################
#showInternalAnnotations=N
#Show internal annotations added by translator
#        =0 does not show any OpenACC/internal annotations
#        =1 show only OpenACC annotations (default)
#        =2 show both OpenACC and acc internal annotations
#        =3 show all annotations(OpenACC, acc internal, and cetus annotations)
#(this option can be used for debugging purpose.)
#
########################################
#Option: shrdArryCachingOnConst
########################################
#shrdArryCachingOnConst
#Cache R/O shared array variables onto GPU constant memory
#
########################################
#Option: shrdArryCachingOnTM
########################################
#shrdArryCachingOnTM
#Cache 1-dimensional, R/O shared array variables onto GPU texture memory
#
########################################
#Option: shrdArryElmtCachingOnReg
########################################
#shrdArryElmtCachingOnReg
#Cache shared array elements onto GPU registers; this option may not be used if aliasing between array accesses exists.
#
########################################
#Option: shrdSclrCachingOnConst
########################################
#shrdSclrCachingOnConst
#Cache R/O shared scalar variables onto GPU constant memory
#
########################################
#Option: shrdSclrCachingOnReg
########################################
#shrdSclrCachingOnReg
#Cache shared scalar variables onto GPU registers
#
########################################
#Option: shrdSclrCachingOnSM
########################################
#shrdSclrCachingOnSM
#Cache shared scalar variables onto GPU shared memory
#
########################################
#Option: skip-procedures
########################################
#skip-procedures=proc1,proc2,...
#Causes all passes that observe this flag to skip the listed procedures
#
########################################
#Option: skipKernelLoopBoundChecking
########################################
#skipKernelLoopBoundChecking
#Skip kernel-loop-boundary-checking code when generating a device kernel; it is safe only if total number of workers equals to that of the kernel loop iterations
#
########################################
#Option: slidingWindowTransformation
########################################
#slidingWindowTransformation=N
#Control the sliding-window transformation; 
#N = 0 (Disable this sliding-window transformation)
#N = 1 (Enable this sliding-window transformation when targeting Altera FPGAs) (default)
#N = 2 (Enable this sliding-window transformation for all devices)
#
########################################
#Option: targetArch
########################################
#targetArch=N
#Set a target architecture: 
#        =0 for CUDA
#        =1 for general OpenCL 
#        =2 for Xeon Phi with OpenCL 
#        =3 for Altera with OpenCL 
#If not set, the target is decided by OPENARC_ARCH env variable.
#
########################################
#Option: teliminate-branch
########################################
#teliminate-branch=N
#Eliminates unreachable branch targets
#      =0 disable (default)
#      =1 enable
#      =2 leave old statements as comments
#
########################################
#Option: tinline
########################################
#tinline=mode=0|1|2|3|4:depth=0|1:pragma=0|1:debug=0|1:foronly=0|1:complement=0|1:functions=foo,bar,...
#(Experimental) Perform simple subroutine inline expansion tranformation
#   mode
#      =0 inline inside main function (default)
#      =1 inline inside selected functions provided in the "functions" sub-option
#      =2 inline selected functions provided in the "functions" sub-option, when invoked
#      =3 inline according to the "inlinein" pragmas
#      =4 inline according to both "inlinein" and "inline" pragmas
#   depth
#      =0 perform inlining recursively i.e. within callees (and their callees) as well (default)
#      =1 perform 1-level inlining 
#   pragma
#      =0 do not honor "noinlinein" and "noinline" pragmas
#      =1 honor "noinlinein" and "noinline" pragmas (default)
#   debug
#      =0 remove inlined (and other) functions if they are no longer executed (default)
#      =1 do not remove the inlined (and other) functions even if they are no longer executed
#   foronly
#      =0 try to inline all function calls depending on other options (default)
#      =1 try to inline function calls inside for loops only 
#   complement
#      =0 consider the functions provided in the command line with "functions" sub-option (default)
#      =1 consider all functions except the ones provided in the command line with "functions" sub-option
#   functions
#      =[comma-separated list] consider the provided functions. 
#      (Note 1: This sub-option is meaningful for modes 1 and 2 only) 
#      (Note 2: It is used with "complement" sub-option to determine which functions should be considered.)
#
########################################
#Option: tsingle-call
########################################
#tsingle-call
#Transform all statements so they contain at most one function call
#
########################################
#Option: tsingle-declarator
########################################
#tsingle-declarator
#Transform all variable declarations so they contain at most one declarator
#
########################################
#Option: tsingle-return
########################################
#tsingle-return
#Transform all procedures so they have a single return statement
#
########################################
#Option: tuningLevel
########################################
#tuningLevel=N
#Set tuning level when genTuningConfFiles is on; 
#N = 1 (exhaustive search on program-level tuning options, default), 
#N = 2 (exhaustive search on kernel-level tuning options)
#
########################################
#Option: useLoopCollapse
########################################
#useLoopCollapse
#Apply LoopCollapse optimization in ACC2GPU translation
#
########################################
#Option: useMallocPitch
########################################
#useMallocPitch
#Use cudaMallocPitch() in ACC2GPU translation
#
########################################
#Option: useMatrixTranspose
########################################
#useMatrixTranspose
#Apply MatrixTranspose optimization in ACC2GPU translation
#
########################################
#Option: useParallelLoopSwap
########################################
#useParallelLoopSwap
#Apply ParallelLoopSwap optimization in OpenACC2GPU translation
#
########################################
#Option: useUnrollingOnReduction
########################################
#useUnrollingOnReduction
#Apply loop unrolling optimization for in-block reduction in ACC2GPU translation;to apply this opt, number of workers in a gang should be 2^m.
#
########################################
#Option: verbosity
########################################
#verbosity=N
#Degree of status messages (0-4) that you wish to see (default is 0)
#
########################################
#Option: verificationOptions
########################################
#verificationOptions=complement=0|1:kernels=kernel1,kernel2,...
#Set options used for GPU kernel verification (programVerification == 1); 
#complement = 0 (consider kernels provided in the commandline with "kernels" sub-option)
#           = 1 (consider all kernels except for those provided in the commandline with "kernels" sub-option (default))
#kernels = [comma-separated list] consider the provided kernels.
#      (Note: It is used with "complement" sub-option to determine which kernels should be considered.)
#
########################################
#Option: version
########################################
#version
#Print the version information
#
#NOPTIONDESC#
##################################################################################
# Uncomment and modify below list as necessary to apply configuration parameters #
##################################################################################
#############################
# Translation configuration #
#############################
#acc2gpu=1
#omp2acc=1
#targetArch=0
#AccAnalysisOnly=1
#SkipGPUTranslation=N
showInternalAnnotations=0
skipKernelLoopBoundChecking
#SetAccEntryFunction=filename
addIncludePath=__openarcrt__
macro=DUMMY=1,VERIFICATION=1,LOGN=__inputSize__,DELAY_ELEMENTS_ON_LOCAL=1
defaultNumWorkers=128
#maxNumGangs=N
#maxNumWorkers=N
#outdir=cetus_output
#loopUnrollFactor=N
#pipelineTransformation=N
#slidingWindowTransformation=N
##########################
# Analysis configuration #
##########################
#AccParallelization=N
AccPrivatization=1
AccReduction=1
#assumeNonZeroTripLoops
#gpuMemTrOptLevel
#prvtArryCachingOnSM
#localRedVarConf=N
#useLoopCollapse
#useMallocPitch
#useMatrixTranspose
#useParallelLoopSwap
#useUnrollingOnReduction
assumeNoAliasingAmongKernelArgs
#MemTrOptOnLoops=N
#gpuMallocOptLevel=N
######################################
# Caching optimization configuration #
######################################
#disableDefaultCachingOpts
shrdArryCachingOnConst
#shrdArryCachingOnTM
shrdArryElmtCachingOnReg
shrdSclrCachingOnConst
shrdSclrCachingOnReg
shrdSclrCachingOnSM
######################
# CUDA configuration #
######################
#cudaGlobalMemSize=size-in-bytes
#cudaMaxGridDimSize=number
#cudaSharedMemSize=size-in-bytes
#CUDACompCapability
######################
# FPGA configuration #
######################
#defaultNumComputeUnits=1
#defaultNumSIMDWorkItems=1
###########################
# Debugging configuration #
###########################
#programVerification=2
#verificationOptions=complement=0|1:kernels=kernel1,kernel2,...
#defaultMarginOfError=1.0e-12
#minValueToCheck=1e-32
#UEPRemovalOptLevel=N
#doNotRemoveUnusedSymbols=N
#disableStatic2GlobalConversion
#disableWorkShareLoopCollapsing
#addErrorCheckingCode
#addSafetyCheckingCode
forceSyncKernelCall
CloneKernelCallingProcedures=0
#debug_parser_input
#debug_parser_output
#debug_preprocessor_input
#debug_preprocessor_command
#expand-all-header
#expand-user-header
#printConfigurations
#noPrintCode
#enableFaultInjection
#enableCustomProfiling
########################
# Tuning configuration #
########################
#UserDirectiveFile
#defaultTuningConfFile=gpuTuning.config
#extractTuningParameters=filename
#genTuningConfFiles=tuningdir
#tuningLevel=1
######################
# LLVM configuration #
######################
#emitLLVM
#WerrorLLVM
#debugLLVM
#########################
# Misc. configururation #
#########################
#dump-options
#dump-system-options
#induction=N
#load-options
#loop-interchange
#loop-tiling
#normalize-loops
#normalize-return-stmt
#profile-loops=N
#tinline=mode=0|1|2|3|4:depth=0|1:pragma=0|1:debug=0|1:foronly=0|1:complement=0|1:functions=foo,bar,...
#tsingle-call
#tsingle-declarator
#tsingle-return
#verbosity=N
#ASPENModelGen=mode=N
#alias=N
#callgraph
#ddt=N
#help
#ompGen=N
#parallelize-loops
#parser=parsername
#preprocessor=command
#privatize=N
#reduction=N
#profitable-omp=N
#range=N
#skip-procedures=proc1,proc2,...
#teliminate-branch=N
#version
#NOPTION#
