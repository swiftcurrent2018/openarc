/**
 * 
 */
package openacc.hir;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import cetus.hir.Expression;
import cetus.hir.NotAnOrphanException;
import cetus.hir.Traversable;

/**
 * @author Seyong Lee <lees2@ornl.gov>
 *         Future Technologies Group
 *         Oak Ridge National Laboratory
 *
 */
public abstract class ASPENExpression implements Cloneable, Traversable {
    /** The parent object of the expression */
	
    protected Traversable parent;

    /** All children must be Expressions. (Exception: statement expression) */
    protected List<Traversable> children;
    
    /** Empty child list for expressions having no children */
    protected static final List empty_list =
            Collections.unmodifiableList(new ArrayList<Object>(0));

	/**
	 * 
	 */
	protected ASPENExpression() {
		parent = null;
		children = new ArrayList<Traversable>(1);
	}
	
    /**
    * Constructor for derived classes.
    *
    * @param size The initial size for the child list.
    */
    @SuppressWarnings("unchecked")
    protected ASPENExpression(int size) {
        parent = null;
        if (size < 0) {
            children = empty_list;
        } else {
            children = new ArrayList<Traversable>(size);
        }
    }
	
    /* Traversable interface */
    public List<Traversable> getChildren() {
        return children;
    }

    /* Traversable interface */
    public Traversable getParent() {
        return parent;
    }
	
    /**
    * This operation is not allowed.
    * @throws UnsupportedOperationException always
    */
    public void removeChild(Traversable child) {
        throw new UnsupportedOperationException(
                "ASPENExpression do not support removal of arbitrary children.");
    }
    
    /**
    * @throws NotAnOrphanException if <b>t</b> has a parent object.
    * @throws IllegalArgumentException if <b>index</b> is out-of-range or
    * <b>t</b> is not an expression.
    */
    public void setChild(int index, Traversable t) {
        if (t.getParent() != null) {
            throw new NotAnOrphanException();
        }
        if (!(t instanceof ASPENExpression) || index >= children.size()) {
            throw new IllegalArgumentException();
        }
        // Detach the old child
        if (children.get(index) != null) {
            children.get(index).setParent(null);
        }
        children.set(index, t);
        t.setParent(this);
    }
    
    /**
    * Common operation used in constructors - adds the specified traversable
    * object at the end of the child list.
    *
    * @param t the new child object to be added.
    * @throws NotAnOrphanException
    */
    protected void addChild(Traversable t) {
        if (t.getParent() != null) {
            throw new NotAnOrphanException(this.getClass().getName());
        }
        children.add(t);
        t.setParent(this);
    }
    
    /* Traversable interface */
    public void setParent(Traversable t) {
        // ASPENExpression can appear in many places so it's probably not
        // worth it to try and provide instanceof checks against t here
        parent = t;
    }
    
    /**
    * Creates and returns a deep copy of this expression.
    *
    * @return a deep copy of this expression.
    */
    @Override
    public ASPENExpression clone() {
        ASPENExpression o = null;
        try {
            o = (ASPENExpression)super.clone();
        } catch(CloneNotSupportedException e) {
            throw new InternalError();
        }
        o.parent = null;
        if (children != null) {
            o.children = new ArrayList<Traversable>(children.size());
            for (int i = 0; i < children.size(); i++) {
                Traversable new_child = children.get(i);
                if (new_child instanceof ASPENExpression) {
                    new_child = ((ASPENExpression)new_child).clone();
                } else if (new_child instanceof Expression) {
                    new_child = ((Expression)new_child).clone();
                }
                new_child.setParent(o);
                o.children.add(new_child);
            }
        } else {
            o.children = null;
        }
        return o;
    }
    
    /**
    * Checks if the given object is has the same type with this expression and
    * its children is same with this expression's. The sub classes of expression
    * should call this method first and proceed with more checking if they
    * have additional fields to be checked.
    * @param o the object to be compared with.
    * @return true if {@code o!=null}, {@code this.getClass()==o.getClass()},
    *       and {@code this.children.equals(o.children) ||
    *       this.children==o.children==null}
    */
    @Override
    public boolean equals(Object o) {
        if (o == null || this.getClass() != o.getClass()) {
            return false;
        }
        if (children == null) {
            return (((ASPENExpression)o).children == null);
        } else {
            return children.equals(((ASPENExpression)o).children);
        }
    }
    
}
