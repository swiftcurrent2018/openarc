####################################################################
# - Modify the following environment variables according to user's #
# environment.                                                     #
#   - Set OPENARCLIB to the path to openarcrt directory.           #
#       - Set OPENARC_ARCH to 0 if targeting CUDA GPUs             #
#                         1 if targeting OpenCL devices            #
#                         2 if targeting OpenCL for Xeon Phi       #
#   - Modify target-specific compilation configuration.            #
#       GOMP_FLAGS : compiler flag to enable OpenMP                #
#       GOMP_LIBS  : library to add for OpenMP                     #
#       CC         : frontend C compiler                           # 
#       CXX        : frontend C++ compiler, used to compile        #
#                    OpenARC-generated output program              #
#       CPP        : C preprocessor called by OpenARC              #
#       BACKENDCXX : backend compiler, used to compile OpenARC     #
#                    runtimes (e.g., nvcc for CUDA runtimes)       #
#       GMACROS    : global compiler flags                         #
#       GPROFILEMACROS : macros used to compile profile-version of #
#                        OpenARC runtimes, which should set macro  # 
#                        _OPENARC_PROFILE_ to 1                    #
#       GBACKEND_DEBUG : debug flags for the backend compiler      #
#                     a debugger mode                              # 
#       CC_FLAGS_PREFIX : prefix used to directly pass compiler    #
#                         options in NVCC (Not needed for GCC)     #
#       GBACKEND_FLAGS : flags for the backend compiler            #
#       GBACKEND_INCLUDES : include path for the backend compiler  #
#       GBACKEND_LIBS : libraries for the backend compiler         #
#       GBACKEND_DEBUG : debug flags for the backend compiler      #
#       GFRONTEND_FLAGS : flags for the frontend compiler          #
#       GFRONTEND_INCLUDES : include path for the frontend compiler#
#       GFRONTEND_LIBS : libraries for the frontend compiler       #
#       GFRONTEND_DEBUG : debug flags for the frontend compiler    #
#   - Modify target-specific LLVM backend configuration (required  #
#     only if LLVM support is enabled):                            #
#       LLVM_TARGET_TRIPLE      : LLVM target triple string        #
#       LLVM_TARGET_DATA_LAYOUT : LLVM target data layout string   #
#       PERL                    : location of perl                 #
#   - Modify target-specific test configuration (required only for #
#     some examples, benchmarks, or other tests):                  #
#       MPI_INCLUDES    : include path for MPI                     #
#       MPI_LIBDIR      : library path for MPI                     #
#       FC              : fortran compiler                         #
#       SPEC_CPU2006    : SPEC CPU 2006 installation directory     #
#       SPEC_CFG        : SPEC CPU 2006 config file (if value does #
#                         not contain "/", then it names a sample  #
#                         file included with OpenARC)              #
#       JUNIT_CLASSPATH : Java classpath when building and running #
#                         JUnit test suite. See test/junit/README  #
#                         for Java packages that must be located   #
#                         here.                                    #
#       NVM_TESTDIR     : directory for test suite to write files  #
#                         intended for an NVM device. Defaults to  #
#                         a temporary HDD directory. Setting this  #
#                         to a directory on a RAM disk or on an    #
#                         actual NVM device will accelerate the    #
#                         NVM tests significantly.                 #
#   - Modify target-specific location of Intel's pmem libraries    #
#     (required only for NVL support):                             #
#       PMEM_INCLUDES : include path for pmem                      #
#       PMEM_LIBDIR   : library path for pmem                      #
#                                                                  #
# When specifying CPP, you must specify a C preprocessor and       #
# command-line options that disable C language extensions that     #
# OpenARC does not support.  For example, on OS X when CPP is      #
# clang, we have found that /usr/include/stdlib.h uses clang's     #
# block reference extension.  To suppress that usage, we specify   #
# CPP as gcc 4.2 (from MacPorts package apple-gcc42) with the -E   #
# and -std=c99 options. (CF: GCC (Apple LLVM version 6.1.0) on OSX #
# V10.10 ignores -std=c99 option.)                                 #
#                                                                  #
# LLVM_TARGET_TRIPLE and LLVM_TARGET_DATA_LAYOUT describe the      #
# target platform to LLVM.  If you have clang installed, you can   #
# usually use it to find the correct strings for your native       #
# target.  For example, in our OS X installation, we see this:     #
#                                                                  #
#   $ echo 'int main() {return 0;}' > test.c                       #
#   $ clang -S -emit-llvm -o- test.c | grep ^target                #
#   target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"    #
#   target triple = "x86_64-apple-macosx10.9.0"                    #
#                                                                  #
# For more information about these strings, see:                   #
#                                                                  #
#   http://llvm.org/docs/LangRef.html#target-triple                #
#   http://llvm.org/docs/LangRef.html#data-layout                  #
#                                                                  #
####################################################################
###################
# OpenARC Setting #
###################
OPENARCLIB = ${HOME}/work/openarc/openarcrt
CETUS_OUTPUT = cetus_output
#OPENARC_ARCH = 0

########################################################################
# Set the target system                                                #
# Example targets: Titan, Newark, MacBookPro, Beacon Atlanta           #
########################################################################
# Titan: Cray XK7 system with NVIDIA GPUs                              #
#        https://www.olcf.ornl.gov/computing-resources/titan-cray-xk7/ #
# Beacon: Linux system with Intel Xeon Phi coprocessors (MICs)         #
#        https://www.nics.tennessee.edu/beacon                         #
# Newark: Linux system with NVIDIA GPUs and an Altera FPGA             #
# Atlanta: LInux system with AMD GPUs                                  #
# MacBookPro: OS X system with an AMD GPU                              #
# Kold: a mini cluster consisting of four HP SL250 nodes used for      #
#       pilot studies within the Keeneland project.                    #
########################################################################
TARGET_SYSTEM = Newark

########################
# Target System: Titan #
########################
ifeq ($(TARGET_SYSTEM),Titan)

OPENARC_ARCH = 0
GOMP_FLAGS = -openmp
GOMP_LIBS =
CC = cc
CXX = CC
#CPP = $(CC) -E
CPP = cpp
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = CC
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/nvidia/cudatoolkit7.0/7.0.28-1.0502.10280.4.1/include
GBACKEND_LIBS = 
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
else
BACKENDCXX = CC
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/nvidia/cudatoolkit7.0/7.0.28-1.0502.10280.4.1/include
GBACKEND_LIBS =
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
endif

#LLVM_TARGET_TRIPLE =
#LLVM_TARGET_DATA_LAYOUT =
#PERL = perl

#MPI_INCLUDES =
#MPI_LIBDIR =
#FC =
#SPEC_CPU2006 =
#SPEC_CFG =
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#PMEM_INCLUDES =
#PMEM_LIBDIR =

endif

#########################
# Target System: Newark #
#########################
ifeq ($(TARGET_SYSTEM),Newark)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1

ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_20 -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g
else
ifeq ($(OPENARC_ARCH), 3)
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/altera/15.0/hld/host/include -I/opt/altera/15.0/hld/board/nalla_pcie/include
GBACKEND_LIBS = -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/15.0/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/15.0/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++ 
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g
endif
endif

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#PMEM_INCLUDES = /pmem-git/src/include
#PMEM_LIBDIR = /pmem-git/src/debug

endif

#########################
# Target System: Kold #
#########################
ifeq ($(TARGET_SYSTEM),Kold)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = mpicc
CXX = mpic++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1

ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_20 -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g
endif

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#PMEM_INCLUDES = /home/f6l/work/tools/nvml/src/include
#PMEM_LIBDIR = /home/f6l/work/tools/nvml/src/debug

endif

##########################
# Target System: Atlanta #
##########################
ifeq ($(TARGET_SYSTEM),Atlanta)

OPENARC_ARCH = 1
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/AMDAPPSDK-3.0/include
GBACKEND_LIBS = -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#PMEM_INCLUDES = /pmem-git/src/include
#PMEM_LIBDIR = /pmem-git/src/debug

endif

##############################################
# Target System: OS X 10.9 (Radeon HD 6490M) #
##############################################
ifeq ($(TARGET_SYSTEM),MacBookPro)

OPENARC_ARCH = 1
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc-apple-4.2
CXX = g++-apple-4.2
CPP = $(CC) -E -std=c99
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
BACKENDCXX = g++-apple-4.2
CC_FLAGS_PREFIX = 
#GBACKEND_FLAGS = -arch i386 -arch x86_64
GBACKEND_FLAGS = -arch x86_64
GBACKEND_INCLUDES = 
GBACKEND_LIBS = -framework OpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB) -arch x86_64
GFRONTEND_LIBS = -L$(OPENARCLIB) -framework OpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-apple-macosx10.9.0
LLVM_TARGET_DATA_LAYOUT = e-m:o-i64:64-f80:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_INCLUDES = /opt/local/include/openmpi-mp
MPI_LIBDIR = /opt/local/lib/openmpi-mp
FC = gfortran-mp-4.9
SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-osx.cfg.in
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#PMEM_INCLUDES =
#PMEM_LIBDIR =

endif

##############################################
# Target System: Beacon MIC cluster          #
##############################################
ifeq ($(TARGET_SYSTEM),Beacon)

OPENARC_ARCH = 2
GOMP_FLAGS = -openmp
GOMP_LIBS =
CC = icc
CXX = icpc
#CPP = $(CC) -E
CPP = gcc -E -std=c99
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
BACKENDCXX = icpc
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/global/opt/intel/opencl/include
GBACKEND_LIBS = -L/nics/d/home/lees2/local/icd/bin -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB) -I/global/opt/intel/opencl/include
GFRONTEND_LIBS = -L/nics/d/home/lees2/local/icd/bin -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g

#LLVM_TARGET_TRIPLE =
#LLVM_TARGET_DATA_LAYOUT =
#PERL = perl

#MPI_INCLUDES =
#MPI_LIBDIR =
#FC =
#SPEC_CPU2006 =
#SPEC_CFG =
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#PMEM_INCLUDES =
#PMEM_LIBDIR =

endif

##############################################
# make utilities                             #
##############################################

# $(call cmd2abs, CMD)
#
# Returns CMD specified absolutely if CMD contains "/" or if CMD is found in
# $PATH.  Otherwise, returns just CMD.
#
# The seemingly redundant "< /dev/null" is needed, or make fails to run the
# "type" command on newark.  The trouble is that "type" is a shell built-in,
# and make on some platforms tries to run it as an executable if the command
# line doesn't contain any special shell characters.
cmd2abs = $(strip $(if $(findstring /, $(filter-out /%, \
                                         $(firstword $(1)))), \
                       $(shell pwd)/$(strip $(firstword $(1))), \
                       $(if $(shell type -P $(firstword $(1)) </dev/null), \
                            $(shell type -P $(firstword $(1)) </dev/null), \
                            $(firstword $(1)))) \
                  $(wordlist 2, $(words $(1)), $(1)))
