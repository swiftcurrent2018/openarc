####################################################################
# - Modify the following environment variables according to user's #
# environment.                                                     #
# (Example settings can be found in the "Set the target system"    #
#  section below.)                                                 # 
#   - Set OPENARCLIB to the path to openarcrt directory.           #
#       - Set OPENARC_ARCH to 0 if targeting CUDA GPUs             #
#                         1 if targeting OpenCL devices            #
#                         2 if targeting OpenCL for Xeon Phi       #
#   - Modify target-specific compilation configuration.            #
#       GOMP_FLAGS : compiler flag to enable OpenMP                #
#       GOMP_LIBS  : library to add for OpenMP                     #
#       CC         : frontend C compiler                           # 
#       CXX        : frontend C++ compiler, used to compile        #
#                    OpenARC-generated output program              #
#       CPP        : C preprocessor called by OpenARC              #
#       BACKENDCXX : backend compiler, used to compile OpenARC     #
#                    runtimes (e.g., nvcc for CUDA runtimes)       #
#       GMACROS    : global compiler flags                         #
#       GPROFILEMACROS : macros used to compile profile-version of #
#                        OpenARC runtimes, which should set macro  # 
#                        _OPENARC_PROFILE_ to 1                    #
#       GBACKEND_DEBUG : debug flags for the backend compiler      #
#                     a debugger mode                              # 
#       CC_FLAGS_PREFIX : prefix used to directly pass compiler    #
#                         options in NVCC (Not needed for GCC)     #
#       GBACKEND_FLAGS : flags for the backend compiler            #
#       GBACKEND_INCLUDES : include path for the backend compiler  #
#       GBACKEND_LIBS : libraries for the backend compiler         #
#       GBACKEND_DEBUG : debug flags for the backend compiler      #
#       GFRONTEND_FLAGS : flags for the frontend compiler          #
#       GFRONTEND_INCLUDES : include path for the frontend compiler#
#       GFRONTEND_LIBS : libraries for the frontend compiler       #
#       GFRONTEND_DEBUG : debug flags for the frontend compiler    #
#   - Modify target-specific LLVM backend configuration (required  #
#     only if LLVM support is enabled):                            #
#       LLVM_TARGET_TRIPLE      : LLVM target triple string        #
#       LLVM_TARGET_DATA_LAYOUT : LLVM target data layout string   #
#       PERL                    : location of perl                 #
#   - Modify target-specific test configuration (required only for #
#     some examples, benchmarks, or other tests):                  #
#       MPI_FLAGS       : compiler flags for MPI                   #
#       MPI_INCLUDES    : include path for MPI                     #
#       MPI_LIBDIR      : library path for MPI                     #
#       MPI_EXEC        : mpiexec command                          #
#       FC              : fortran compiler                         #
#       SPEC_CPU2006    : SPEC CPU 2006 installation directory     #
#       SPEC_CFG        : SPEC CPU 2006 config file (if value does #
#                         not contain "/", then it names a sample  #
#                         file included with OpenARC)              #
#       JUNIT_CLASSPATH : Java classpath when building and running #
#                         JUnit test suite. See test/junit/README  #
#                         for Java packages that must be located   #
#                         here.                                    #
#       NVM_TESTDIR     : directory for test suite to write files  #
#                         intended for an NVM device. Defaults to  #
#                         a temporary HDD directory. Setting this  #
#                         to a directory on a RAM disk or on an    #
#                         actual NVM device will accelerate the    #
#                         NVM tests significantly.                 #
#   - Specify availability of Intel's NVML libraries from pmem     #
#     (required only for NVL runtime support):                     #
#       HAVE_PMEM_NVML : whether OpenARC's nvl/pmem-nvml submodule #
#                        has been cloned and built (1 for true and #
#                        otherwise false)                          #
#                                                                  #
# When specifying CPP, you must specify a C preprocessor and       #
# command-line options that disable C language extensions that     #
# OpenARC does not support.  For example, on OS X when CPP is      #
# clang, we have found that /usr/include/stdlib.h uses clang's     #
# block reference extension.  To suppress that usage, we specify   #
# CPP as gcc 4.2 (from MacPorts package apple-gcc42) or gcc 6.1.0  #
# (from MacPorts package gcc6) with the -E and -std=c99 options.   #
# (CF: GCC (Apple LLVM version 6.1.0) on OSX V10.10 ignores        #
# -std=c99 option.)                                                #
#                                                                  #
# LLVM_TARGET_TRIPLE and LLVM_TARGET_DATA_LAYOUT describe the      #
# target platform to LLVM.  If you have clang installed, you can   #
# usually use it to find the correct strings for your native       #
# target.  For example, in our OS X installation, we see this:     #
#                                                                  #
#   $ echo 'int main() {return 0;}' > test.c                       #
#   $ clang -S -emit-llvm -o- test.c | grep ^target                #
#   target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"    #
#   target triple = "x86_64-apple-macosx10.9.0"                    #
#                                                                  #
# For more information about these strings, see:                   #
#                                                                  #
#   http://llvm.org/docs/LangRef.html#target-triple                #
#   http://llvm.org/docs/LangRef.html#data-layout                  #
#                                                                  #
# MPI_INCLUDES and MPI_LIBDIR are required to build MPI support    #
# into the NVL runtime.                                            #
#                                                                  #
####################################################################
###################
# OpenARC Setting #
###########################################################################
# Setting OPENARCLIB is mandatory unless an environment variable, openarc #
# is set to the root directory of the OpenARC repository.                 #
###########################################################################
OPENARCLIB = $(openarc)/openarcrt
CETUS_OUTPUT = cetus_output
#OPENARC_ARCH = 0

########################################################################
# Set the target system                                                #
########################################################################
# Example targets: LCUDA, Titan, Newark, MacBookPro, Beacon, Atlanta,  #
#                  Cooley                                              #
# To target a general Linux system with NVIDIA GPUs, choose LCUDA and  #
# adjust variables in the LCUDA section as necessary.                  # 
########################################################################
# LCUDA: Linux system with NVIDIA GPUs                                 #
# Titan: Cray XK7 system with NVIDIA GPUs                              #
#        https://www.olcf.ornl.gov/computing-resources/titan-cray-xk7/ #
# Beacon: Linux system with Intel Xeon Phi coprocessors (MICs)         #
#        https://www.nics.tennessee.edu/beacon                         #
# Newark: Linux system with NVIDIA GPUs and an Altera FPGA             #
# Atlanta: LInux system with AMD GPUs                                  #
# MacBookPro: OS X system with an AMD GPU                              #
# MacBookPro_LLVM: MacBookPro but for LLVM backend on macOS 10.12      #
# Megatron_LLVM: Linux system with fusion-io ioScale2 SSD;             #
#                configuration is for LLVM backend                     #
# Kold: a mini cluster consisting of four HP SL250 nodes used for      #
#       pilot studies within the Keeneland project.                    #
# Cooley: ALCF NVIDIA GPU cluster                                      #
# Oswald: Heterogeneous mini cluster with NVIDIA Tesla P100 and        #
#         Nallatech 510T FPGA                                          #
#         (To use FPGAs, AOCLSDKROOT should be properly selected.)     #
########################################################################
TARGET_SYSTEM = LCUDA

########################
# Target System: LCUDA #
########################
ifeq ($(TARGET_SYSTEM),LCUDA)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_20 -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -L/opt/cuda/7.5/cuda/lib64 -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L/opt/cuda/7.5/cuda/lib64 -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g

#MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib

endif

########################
# Target System: Titan #
########################
ifeq ($(TARGET_SYSTEM),Titan)

OPENARC_ARCH = 0
#option for Cray compiler (PrgEnv-cray)
#GOMP_FLAGS = 
#option for PGI compiler (PrgEnv-gnu)
#GOMP_FLAGS = -fopenmp
#option for Intel compiler (PrgEnv-intel)
GOMP_FLAGS = -qopenmp
#option for PGI compiler (PrgEnv-pgi)
#GOMP_FLAGS = -mp
#GOMP_LIBS =
CC = cc
CXX = CC
#CPP = $(CC) -E
CPP = cpp
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = CC
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/nvidia/cudatoolkit7.0/7.0.28-1.0502.10280.4.1/include
GBACKEND_LIBS = 
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
else
BACKENDCXX = CC
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/nvidia/cudatoolkit7.0/7.0.28-1.0502.10280.4.1/include
GBACKEND_LIBS =
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
endif

#LLVM_TARGET_TRIPLE =
#LLVM_TARGET_DATA_LAYOUT =
#PERL = perl

MPI_FLAGS = -craympich-mt
#MPI_INCLUDES =
#MPI_LIBDIR =
#MPI_EXEC =
#FC =
#SPEC_CPU2006 =
#SPEC_CFG =
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif

#########################
# Target System: Newark #
#########################
ifeq ($(TARGET_SYSTEM),Newark)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1

ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_20 -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g
else
ifeq ($(OPENARC_ARCH), 3)
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
# Altera OpenCL 15.0
#GBACKEND_INCLUDES = -I/opt/altera/15.0/hld/host/include
#GBACKEND_LIBS = -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/15.0/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++
# Altera OpenCL 16.1
GBACKEND_INCLUDES = -I/opt/altera/16.1/standard/hld/host/include
GBACKEND_LIBS = -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/16.1/standard/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++ -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
# Altera OpenCL 15.0
#GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/15.0/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++ 
# Altera OpenCL 16.1
GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/altera/15.0/hld/board/nalla_pcie/linux64/lib -L/opt/altera/16.1/standard/hld/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++ -lOpenCL
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g
endif
endif

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

#MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
#MPI_EXEC =
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif

#########################
# Target System: Oswald #
#########################
ifeq ($(TARGET_SYSTEM),Oswald)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1

ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_60 -O3
GBACKEND_INCLUDES = -I/opt/cuda/8.0/cuda/include
GBACKEND_LIBS = -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g
else
ifeq ($(OPENARC_ARCH), 3)
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
# Altera OpenCL 16.0
#AOCLSDKROOT = /opt/altera/16.0/hld
# Altera OpenCL 17.1
AOCLSDKROOT = /opt/altera/17.1/hld
GBACKEND_INCLUDES = -I$(AOCLSDKROOT)/host/include
GBACKEND_LIBS = -L$(AOCLSDKROOT)/board/nalla_pcie/linux64/lib -L$(AOCLSDKROOT)/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -L$(AOCLSDKROOT)/board/nalla_pcie/linux64/lib -L$(AOCLSDKROOT)/host/linux64/lib -lalteracl -lacl_emulator_kernel_rt  -lalterahalmmd -lnalla_pcie_mmd -lelf -lrt -ldl -lstdc++ 
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/cuda/8.0/cuda/include
GBACKEND_LIBS = -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g
endif
endif

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

#MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
#MPI_EXEC =
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#PMEM_INCLUDES = /pmem-git/src/include
#PMEM_LIBDIR = /pmem-git/src/debug

endif


#########################
# Target System: Kold #
#########################
ifeq ($(TARGET_SYSTEM),Kold)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = mpicc
CXX = mpic++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1

ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = nvcc
CC_FLAGS_PREFIX = -Xcompiler
GBACKEND_FLAGS = -arch sm_20 -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lcuda -lOpenCL
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lcuda
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/cuda/7.5/cuda/include
GBACKEND_LIBS = -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g
endif

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

#MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
#MPI_EXEC =
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif

##########################
# Target System: Atlanta #
##########################
ifeq ($(TARGET_SYSTEM),Atlanta)

OPENARC_ARCH = 1
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/AMDAPPSDK-3.0/include
GBACKEND_LIBS = -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

#MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.8.5-rhel6-gnu/lib
#MPI_EXEC =
FC = gfortran
#SPEC_CPU2006 = /spec/cpu2006/1.0.1
SPEC_CFG = spec-newark.cfg.in
#JUNIT_CLASSPATH = /junit-4.11.jar:/hamcrest-core-1.3.jar:/system-rules-1.9.0.jar
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif

##############################################
# Target System: OS X 10.9 (Radeon HD 6490M) #
##############################################
ifeq ($(TARGET_SYSTEM),MacBookPro)

OPENARC_ARCH = 1
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
#CC = gcc-apple-4.2
#CXX = g++-apple-4.2
#CPP = $(CC) -E -std=c99
CC = mpicc -std=c99
CXX = mpicxx
#CC = mpicc -cc=gcc -std=c99
#CXX = mpicxx -cxx=g++
CPP = gcc -E -std=c99
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
#BACKENDCXX = g++-apple-4.2
BACKENDCXX = mpicxx
#BACKENDCXX = mpicxx -cxx=g++
CC_FLAGS_PREFIX = 
#GBACKEND_FLAGS = -arch i386 -arch x86_64
GBACKEND_FLAGS = -arch x86_64
GBACKEND_INCLUDES = 
GBACKEND_LIBS = -framework OpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB) -arch x86_64
GFRONTEND_LIBS = -L$(OPENARCLIB) -framework OpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-apple-macosx10.9.0
LLVM_TARGET_DATA_LAYOUT = e-m:o-i64:64-f80:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

#MPI_FLAGS =
MPI_INCLUDES = /opt/local/include/mpich-mp
MPI_LIBDIR = /opt/local/lib/mpich-mp
#MPI_EXEC =
FC = gfortran-mp-4.9
#SPEC_CPU2006 =
SPEC_CFG = spec-osx.cfg.in
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

HAVE_PMEM_NVML = 0

endif

###################################################################
# Target System: macOS 10.12 (Sierra) configured for LLVM backend #
###################################################################
ifeq ($(TARGET_SYSTEM),MacBookPro_LLVM)

OPENARC_ARCH = 1
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = /opt/local/bin/gcc-mp-6
CXX = /opt/local/bin/g++-mp-6
CPP = $(CC) -E -std=c99
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
BACKENDCXX = $(CXX)
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -arch x86_64
GBACKEND_INCLUDES = 
GBACKEND_LIBS = -framework OpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB) -arch x86_64
GFRONTEND_LIBS = -L$(OPENARCLIB) -framework OpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-apple-macosx10.12.0
LLVM_TARGET_DATA_LAYOUT = e-m:o-i64:64-f80:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_FLAGS =
MPI_INCLUDES = /opt/local/include/openmpi-mp
MPI_LIBDIR = /opt/local/lib/openmpi-mp
MPI_EXEC = /opt/local/bin/mpirun-openmpi-mp
FC = gfortran-mp-6
SPEC_CPU2006 = ${HOME}/installs/spec/cpu2006/1.0.1
SPEC_CFG = spec-osx.cfg.in
JUNIT_CLASSPATH = ${HOME}/installs/junit-4.11.jar:${HOME}/installs/hamcrest-core-1.3.jar:${HOME}/installs/system-rules/system-rules-1.9.0.jar
#NVM_TESTDIR =

HAVE_PMEM_NVML = 0

endif

################################
# Target System: Megatron_LLVM #
################################
ifeq ($(TARGET_SYSTEM),Megatron_LLVM)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = gcc
CXX = g++
CPP = $(CC) -E
GMACROS = -D OPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D _OPENARC_PROFILE_=1
BACKENDCXX = g++
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/opt/AMDAPPSDK-3.0/include
GBACKEND_LIBS = -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB) -L/opt/AMDAPPSDK-3.0/lib/x86_64 -lOpenCL
GFRONTEND_DEBUG = -g

LLVM_TARGET_TRIPLE = x86_64-redhat-linux-gnu
LLVM_TARGET_DATA_LAYOUT = e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128-p1:192:64:64-p2:192:64:64
PERL = perl

MPI_FLAGS =
MPI_INCLUDES = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.10.4-rhel7-gnu/include
MPI_LIBDIR = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.10.4-rhel7-gnu/lib
MPI_EXEC = /opt/shared/sw/x86_64-unknown-linux-gnu/openmpi/1.10.4-rhel7-gnu/bin/mpiexec
FC = gfortran
SPEC_CPU2006 = /opt/proj-local/jum/spec-cpu2006-v1.0.1
SPEC_CFG = spec-newark.cfg.in
JUNIT_CLASSPATH = /opt/proj-local/jum/junit-4.11.jar:/opt/proj-local/jum/hamcrest-core-1.3.jar:/opt/proj-local/jum/system-rules-1.9.0.jar
NVM_TESTDIR = /opt/fio/scratch/jum

HAVE_PMEM_NVML = 1

endif

##############################################
# Target System: Beacon MIC cluster          #
##############################################
ifeq ($(TARGET_SYSTEM),Beacon)

OPENARC_ARCH = 2
GOMP_FLAGS = -qopenmp
GOMP_LIBS =
CC = icc
CXX = icpc
#CPP = $(CC) -E
CPP = gcc -E -std=c99
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
BACKENDCXX = icpc
CC_FLAGS_PREFIX = 
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/nics/d/home/lees2/local/icd/include
GBACKEND_LIBS = -L/nics/d/home/lees2/local/icd/bin -lOpenCL
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB) -I/nics/d/home/lees2/local/icd/include
GFRONTEND_LIBS = -L/nics/d/home/lees2/local/icd/bin -L$(OPENARCLIB) -lOpenCL
GFRONTEND_DEBUG = -g

#LLVM_TARGET_TRIPLE =
#LLVM_TARGET_DATA_LAYOUT =
#PERL = perl

#MPI_FLAGS =
#MPI_INCLUDES =
#MPI_LIBDIR =
#MPI_EXEC =
#FC =
#SPEC_CPU2006 =
#SPEC_CFG =
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif

#########################
# Target System: Cooley #
#########################
ifeq ($(TARGET_SYSTEM),Cooley)

OPENARC_ARCH = 0
GOMP_FLAGS = -fopenmp
GOMP_LIBS = -lgomp
CC = mpicc
CXX = mpic++
CPP = $(CC) -E
GMACROS = -DOPENARC_ARCH=$(OPENARC_ARCH)
GPROFILEMACROS = -D_OPENARC_PROFILE_=1
ifeq ($(OPENARC_ARCH), 0)
BACKENDCXX = g++
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/soft/visualization/cuda-7.0.28/include
GBACKEND_LIBS = 
GBACKEND_DEBUG = -g -G
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
else
BACKENDCXX = g++
CC_FLAGS_PREFIX =
GBACKEND_FLAGS = -O3
GBACKEND_INCLUDES = -I/soft/visualization/cuda-7.0.28/include
GBACKEND_LIBS =
GBACKEND_DEBUG = -g
GFRONTEND_FLAGS = -O3
GFRONTEND_INCLUDES = -I$(OPENARCLIB)
GFRONTEND_LIBS = -L$(OPENARCLIB)
GFRONTEND_DEBUG = -g
endif

#LLVM_TARGET_TRIPLE =
#LLVM_TARGET_DATA_LAYOUT =
#PERL = perl

#MPI_FLAGS =
#MPI_INCLUDES =
#MPI_LIBDIR =
#MPI_EXEC =
#FC =
#SPEC_CPU2006 =
#SPEC_CFG =
#JUNIT_CLASSPATH =
#NVM_TESTDIR =

#HAVE_PMEM_NVML =

endif


##############################################
# make utilities                             #
##############################################

# $(call cmd2abs, CMD)
#
# Returns CMD specified absolutely if CMD contains "/" or if CMD is found in
# $PATH.  Otherwise, returns just CMD.
#
# The seemingly redundant "< /dev/null" is needed, or make fails to run the
# "type" command on newark.  The trouble is that "type" is a shell built-in,
# and make on some platforms tries to run it as an executable if the command
# line doesn't contain any special shell characters.
cmd2abs = $(strip $(if $(findstring /, $(filter-out /%, \
                                         $(firstword $(1)))), \
                       $(shell pwd)/$(strip $(firstword $(1))), \
                       $(if $(shell type -P $(firstword $(1)) </dev/null), \
                            $(shell type -P $(firstword $(1)) </dev/null), \
                            $(firstword $(1)))) \
                  $(wordlist 2, $(words $(1)), $(1)))

##############################################
# Intel's NVML libraries from pmem           #
##############################################

ifeq ($(HAVE_PMEM_NVML), 1)
  PMEM_INCLUDES=$(openarc)/nvl/pmem-nvml/src/include
  PMEM_LIBDIR=$(openarc)/nvl/pmem-nvml/src/nondebug
endif
