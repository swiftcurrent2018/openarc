######################################################
# Template Makefile that can be used for compiling   #
# both the input C program and the OpenARC-generated #
# output C++ program.                                #
######################################################

##########################################################
# Makefile options that the user can overwrite           #
##########################################################
# OMP: set to 1 to use OpenMP (default: 0)               # 
# MODE: set to profile to use a built-in profiling tool  #
#       (default: normal)                                #
#       If this is set to profile, the runtime system    #
#       will print profiling results according to the    #
#       verbosity level set by OPENARCRT_VERBOSITY       #
#       environment variable.                            # 
# DIST: set to 1 to use Integrated Message Passing       #
#       OpenACC (IMPACC) version                         #
#       (default: 0)                                     #
# AOCL_FLAGS: set Altera OpenCL Compiler (AOC) flags     #
#    - commonly used options                             #
#      -march=emulator //compile a kernel for emulation  #
#      -v //show progress of the compilation on-screen   # 
#      -c //compile the kernel and generate a Quartus II #
#         //hardware design project without creating a   #
#         //hardware configuration file.                 #
#      --profile //instrument the OpenCL kernel pipeline #
#                //with performance counters.            #
#      --report  //display estimated resource usage on   #
#                //the screen.                           #
#    (default: -march=emulator)                          #
# AOCL_BOARD: set a target Altera FPGA board             #
#    - "--board $(AOCL_BOARD)" will be added to the AOC  #
#     in addition to the above flags                     # 
#    (default: p385_hpc_a7)                              #
##########################################################
OMP ?= 0
MODE ?= normal
DIST ?= 0
AOCL_BOARD ?= p385_hpc_a7
AOCL_FLAGS ?= -march=emulator

ifeq ($(DIST),1)
#OMP should be set to 1 to use IMPACC version.
OMP = 1
endif

########################
# Set the program name #
########################
#BENCHMARK = openaccbenchmark 

########################################
# Set the input C source files (CSRCS) #
########################################
#CSRCS = matmul.c
CXXSRCS = $(CSRCS:.c=.cpp)

#########################################
# Set macros used for the input program #
#########################################
DEFSET_CPU += -DOMP=$(OMP)
DEFSET_ACC += -DOMP=$(OMP)

#########################################################
# Use the following macros to add program-specific      #
# compiler flags and libraries                          #
# - CFLAGS1 and CLIBS1 to compile the input C program   #
# - CFLAGS2 and CLIBS2 to compile the OpenARC-generated #
#   output C++ program                                  # 
#########################################################
#CFLAGS1 =  
#CFLAGS2 =  
#CLIBS1 = 
#CLIBS2 = 

################################################
# TARGET is where the output binary is stored. #
################################################
TARGET ?= ./bin

##############################
# Set the output binary name #
##############################
BENCHMARK_OPENACC = $(TARGET)/$(BENCHMARK)_ACC
BENCHMARK_CPU = $(TARGET)/$(BENCHMARK)_CPU

####################
# Compiler options #
####################
COMMONCFLAGS = $(GMACROS) $(GFRONTEND_FLAGS)
COMMONCLIBS = $(GFRONTEND_LIBS) 
COMMONCINCLUDES = $(GFRONTEND_INCLUDES)
ifeq ($(OPENARC_ARCH),0)
# CUDA target
OPENARCLIB_SUFFIX = cuda
KERNEL_FILE = openarc_kernel.cu
else
# OpenCL target
OPENARCLIB_SUFFIX = opencl
KERNEL_FILE = openarc_kernel.cl
endif

ifeq ($(OMP),1)
CLIBS1_BASE = $(GOMP_LIBS)
CLIBS2_BASE = $(COMMONCLIBS) $(GOMP_LIBS)
OMP_FLAGS1 = $(GOMP_FLAGS)
ifneq ($(GOMP_FLAGS),"")
OMP_FLAGS2 = $(GOMP_FLAGS)
endif
ifeq ($(DIST),1)
ACCRT_BASE = openaccrtdist_$(OPENARCLIB_SUFFIX)
else
ACCRT_BASE = openaccrtomp_$(OPENARCLIB_SUFFIX)
endif
else
CLIBS1_BASE = 
CLIBS2_BASE = $(COMMONCLIBS)
OMP_FLAGS1 =
OMP_FLAGS2 =
ACCRT_BASE = openaccrt_$(OPENARCLIB_SUFFIX)
endif

# Compiler flags 
CFLAGS1 += $(OMP_FLAGS1)
ifeq ($(MODE),profile)
CFLAGS2 += $(GFRONTEND_DEBUG) $(OMP_FLAGS2) $(COMMONCINCLUDES)
ACCRTLIB = $(ACCRT_BASE)pf
else
CFLAGS2 += $(OMP_FLAGS2) $(COMMONCINCLUDES)
ACCRTLIB = $(ACCRT_BASE)
endif

# Libraries
CLIBS1 += $(CLIBS1_BASE)
CLIBS2 += $(CLIBS2_BASE) -l$(ACCRTLIB)

################
# Make targets #
################
ACC: $(BENCHMARK)_ACC
CPU: $(BENCHMARK)_CPU
all: ACC CPU

$(BENCHMARK)_CPU: $(CSRCS) makedirectories
	$(CC) $(DEFSET_CPU) $(CFLAGS1) -o $(BENCHMARK_CPU) $(CSRCS) $(CLIBS1)

$(BENCHMARK)_ACC: $($(CETUS_OUTPUT)/$(CXXSRCS)) makedirectories
	cd $(CETUS_OUTPUT); $(CXX) $(DEFSET_ACC) $(CFLAGS2) -I ../ -o ../$(BENCHMARK_OPENACC) $(CXXSRCS) $(CLIBS2); cp $(KERNEL_FILE) ../$(TARGET); cp $(OPENARCLIB)/binBuilder_$(OPENARCLIB_SUFFIX) ../$(TARGET); cp $(OPENARCLIB)/Timer ../$(TARGET); cd ../
	if [ "$(OPENARC_ARCH)" = "3" ]; then cd $(CETUS_OUTPUT); aoc $(AOCL_FLAGS) --board $(AOCL_BOARD) openarc_kernel.cl; if [ -f "openarc_kernel.aocx" ]; then cp openarc_kernel.aocx ../$(TARGET)/openarc_kernel_EmulatorDeviceEmulatedDevice.aocx; fi; cd ../; echo ""; echo "====> Initialize AOCL Environment!"; echo "$$ . $$alteraroot/init_opencl.sh"; echo ""; fi
	if [ "$(OPENARC_ARCH)" != "3" ] && [ -f $(TARGET)/binBuilder_$(OPENARCLIB_SUFFIX) ]; then cd $(TARGET); binBuilder_$(OPENARCLIB_SUFFIX); cd ../; fi

COMPILE_KERNEL: $($(CETUS_OUTPUT)/$(KERNLE_FILE)) makedirectories
	if [ "$(OPENARC_ARCH)" = "3" ]; then cd $(CETUS_OUTPUT); aoc $(AOCL_FLAGS) --board $(AOCL_BOARD) openarc_kernel.cl; if [ -f "openarc_kernel.aocx" ]; then cp openarc_kernel.aocx ../$(TARGET)/openarc_kernel_EmulatorDeviceEmulatedDevice.aocx; fi; cd ../; echo ""; echo "====> Initialize AOCL Environment!"; echo "$$ . $$alteraroot/init_opencl.sh"; echo ""; fi
	if [ "$(OPENARC_ARCH)" != "3" ] && [ -f $(TARGET)/binBuilder_$(OPENARCLIB_SUFFIX) ]; then cd $(TARGET); binBuilder_$(OPENARCLIB_SUFFIX); cd ../; fi

makedirectories:
	mkdir -p $(TARGET)

clean:
	rm -f *.o *~ confFile.txt TuningOptions.txt;
	if [ -d ./$(CETUS_OUTPUT) ]; then cd $(CETUS_OUTPUT); rm -rf *.o *~ *aoco *aocx openarc_kernel; cd ..; fi
	if [ -d $(TARGET) ]; then rm -f $(BENCHMARK_CPU) $(BENCHMARK_OPENACC) Timer; cd $(TARGET); rm -f openarc_kernel*.ptx $(KERNEL_FILE) binBuilder_$(OPENARCLIB_SUFFIX) Timer *.aocx; fi

purge: clean
	rm -rf $(TARGET) $(CETUS_OUTPUT) cetus_input openarcConf.txt *.log
